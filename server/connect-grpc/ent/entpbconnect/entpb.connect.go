// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: entpb.proto

package entpbconnect

import (
	entpb "blueprint/ent/proto/entpb"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "entpb.PostService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "entpb.UserService"
)

// PostServiceClient is a client for the entpb.PostService service.
type PostServiceClient interface {
	Create(context.Context, *connect_go.Request[entpb.CreatePostRequest]) (*connect_go.Response[entpb.Post], error)
	Get(context.Context, *connect_go.Request[entpb.GetPostRequest]) (*connect_go.Response[entpb.Post], error)
	Update(context.Context, *connect_go.Request[entpb.UpdatePostRequest]) (*connect_go.Response[entpb.Post], error)
	Delete(context.Context, *connect_go.Request[entpb.DeletePostRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[entpb.ListPostRequest]) (*connect_go.Response[entpb.ListPostResponse], error)
	BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreatePostsRequest]) (*connect_go.Response[entpb.BatchCreatePostsResponse], error)
}

// NewPostServiceClient constructs a client for the entpb.PostService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postServiceClient{
		create: connect_go.NewClient[entpb.CreatePostRequest, entpb.Post](
			httpClient,
			baseURL+"/entpb.PostService/Create",
			opts...,
		),
		get: connect_go.NewClient[entpb.GetPostRequest, entpb.Post](
			httpClient,
			baseURL+"/entpb.PostService/Get",
			opts...,
		),
		update: connect_go.NewClient[entpb.UpdatePostRequest, entpb.Post](
			httpClient,
			baseURL+"/entpb.PostService/Update",
			opts...,
		),
		delete: connect_go.NewClient[entpb.DeletePostRequest, emptypb.Empty](
			httpClient,
			baseURL+"/entpb.PostService/Delete",
			opts...,
		),
		list: connect_go.NewClient[entpb.ListPostRequest, entpb.ListPostResponse](
			httpClient,
			baseURL+"/entpb.PostService/List",
			opts...,
		),
		batchCreate: connect_go.NewClient[entpb.BatchCreatePostsRequest, entpb.BatchCreatePostsResponse](
			httpClient,
			baseURL+"/entpb.PostService/BatchCreate",
			opts...,
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	create      *connect_go.Client[entpb.CreatePostRequest, entpb.Post]
	get         *connect_go.Client[entpb.GetPostRequest, entpb.Post]
	update      *connect_go.Client[entpb.UpdatePostRequest, entpb.Post]
	delete      *connect_go.Client[entpb.DeletePostRequest, emptypb.Empty]
	list        *connect_go.Client[entpb.ListPostRequest, entpb.ListPostResponse]
	batchCreate *connect_go.Client[entpb.BatchCreatePostsRequest, entpb.BatchCreatePostsResponse]
}

// Create calls entpb.PostService.Create.
func (c *postServiceClient) Create(ctx context.Context, req *connect_go.Request[entpb.CreatePostRequest]) (*connect_go.Response[entpb.Post], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls entpb.PostService.Get.
func (c *postServiceClient) Get(ctx context.Context, req *connect_go.Request[entpb.GetPostRequest]) (*connect_go.Response[entpb.Post], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls entpb.PostService.Update.
func (c *postServiceClient) Update(ctx context.Context, req *connect_go.Request[entpb.UpdatePostRequest]) (*connect_go.Response[entpb.Post], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls entpb.PostService.Delete.
func (c *postServiceClient) Delete(ctx context.Context, req *connect_go.Request[entpb.DeletePostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls entpb.PostService.List.
func (c *postServiceClient) List(ctx context.Context, req *connect_go.Request[entpb.ListPostRequest]) (*connect_go.Response[entpb.ListPostResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// BatchCreate calls entpb.PostService.BatchCreate.
func (c *postServiceClient) BatchCreate(ctx context.Context, req *connect_go.Request[entpb.BatchCreatePostsRequest]) (*connect_go.Response[entpb.BatchCreatePostsResponse], error) {
	return c.batchCreate.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the entpb.PostService service.
type PostServiceHandler interface {
	Create(context.Context, *connect_go.Request[entpb.CreatePostRequest]) (*connect_go.Response[entpb.Post], error)
	Get(context.Context, *connect_go.Request[entpb.GetPostRequest]) (*connect_go.Response[entpb.Post], error)
	Update(context.Context, *connect_go.Request[entpb.UpdatePostRequest]) (*connect_go.Response[entpb.Post], error)
	Delete(context.Context, *connect_go.Request[entpb.DeletePostRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[entpb.ListPostRequest]) (*connect_go.Response[entpb.ListPostResponse], error)
	BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreatePostsRequest]) (*connect_go.Response[entpb.BatchCreatePostsResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/entpb.PostService/Create", connect_go.NewUnaryHandler(
		"/entpb.PostService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/entpb.PostService/Get", connect_go.NewUnaryHandler(
		"/entpb.PostService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/entpb.PostService/Update", connect_go.NewUnaryHandler(
		"/entpb.PostService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/entpb.PostService/Delete", connect_go.NewUnaryHandler(
		"/entpb.PostService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/entpb.PostService/List", connect_go.NewUnaryHandler(
		"/entpb.PostService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/entpb.PostService/BatchCreate", connect_go.NewUnaryHandler(
		"/entpb.PostService/BatchCreate",
		svc.BatchCreate,
		opts...,
	))
	return "/entpb.PostService/", mux
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) Create(context.Context, *connect_go.Request[entpb.CreatePostRequest]) (*connect_go.Response[entpb.Post], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.Create is not implemented"))
}

func (UnimplementedPostServiceHandler) Get(context.Context, *connect_go.Request[entpb.GetPostRequest]) (*connect_go.Response[entpb.Post], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.Get is not implemented"))
}

func (UnimplementedPostServiceHandler) Update(context.Context, *connect_go.Request[entpb.UpdatePostRequest]) (*connect_go.Response[entpb.Post], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.Update is not implemented"))
}

func (UnimplementedPostServiceHandler) Delete(context.Context, *connect_go.Request[entpb.DeletePostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.Delete is not implemented"))
}

func (UnimplementedPostServiceHandler) List(context.Context, *connect_go.Request[entpb.ListPostRequest]) (*connect_go.Response[entpb.ListPostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.List is not implemented"))
}

func (UnimplementedPostServiceHandler) BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreatePostsRequest]) (*connect_go.Response[entpb.BatchCreatePostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.PostService.BatchCreate is not implemented"))
}

// UserServiceClient is a client for the entpb.UserService service.
type UserServiceClient interface {
	Create(context.Context, *connect_go.Request[entpb.CreateUserRequest]) (*connect_go.Response[entpb.User], error)
	Get(context.Context, *connect_go.Request[entpb.GetUserRequest]) (*connect_go.Response[entpb.User], error)
	Update(context.Context, *connect_go.Request[entpb.UpdateUserRequest]) (*connect_go.Response[entpb.User], error)
	Delete(context.Context, *connect_go.Request[entpb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[entpb.ListUserRequest]) (*connect_go.Response[entpb.ListUserResponse], error)
	BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreateUsersRequest]) (*connect_go.Response[entpb.BatchCreateUsersResponse], error)
}

// NewUserServiceClient constructs a client for the entpb.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		create: connect_go.NewClient[entpb.CreateUserRequest, entpb.User](
			httpClient,
			baseURL+"/entpb.UserService/Create",
			opts...,
		),
		get: connect_go.NewClient[entpb.GetUserRequest, entpb.User](
			httpClient,
			baseURL+"/entpb.UserService/Get",
			opts...,
		),
		update: connect_go.NewClient[entpb.UpdateUserRequest, entpb.User](
			httpClient,
			baseURL+"/entpb.UserService/Update",
			opts...,
		),
		delete: connect_go.NewClient[entpb.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/entpb.UserService/Delete",
			opts...,
		),
		list: connect_go.NewClient[entpb.ListUserRequest, entpb.ListUserResponse](
			httpClient,
			baseURL+"/entpb.UserService/List",
			opts...,
		),
		batchCreate: connect_go.NewClient[entpb.BatchCreateUsersRequest, entpb.BatchCreateUsersResponse](
			httpClient,
			baseURL+"/entpb.UserService/BatchCreate",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	create      *connect_go.Client[entpb.CreateUserRequest, entpb.User]
	get         *connect_go.Client[entpb.GetUserRequest, entpb.User]
	update      *connect_go.Client[entpb.UpdateUserRequest, entpb.User]
	delete      *connect_go.Client[entpb.DeleteUserRequest, emptypb.Empty]
	list        *connect_go.Client[entpb.ListUserRequest, entpb.ListUserResponse]
	batchCreate *connect_go.Client[entpb.BatchCreateUsersRequest, entpb.BatchCreateUsersResponse]
}

// Create calls entpb.UserService.Create.
func (c *userServiceClient) Create(ctx context.Context, req *connect_go.Request[entpb.CreateUserRequest]) (*connect_go.Response[entpb.User], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls entpb.UserService.Get.
func (c *userServiceClient) Get(ctx context.Context, req *connect_go.Request[entpb.GetUserRequest]) (*connect_go.Response[entpb.User], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls entpb.UserService.Update.
func (c *userServiceClient) Update(ctx context.Context, req *connect_go.Request[entpb.UpdateUserRequest]) (*connect_go.Response[entpb.User], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls entpb.UserService.Delete.
func (c *userServiceClient) Delete(ctx context.Context, req *connect_go.Request[entpb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls entpb.UserService.List.
func (c *userServiceClient) List(ctx context.Context, req *connect_go.Request[entpb.ListUserRequest]) (*connect_go.Response[entpb.ListUserResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// BatchCreate calls entpb.UserService.BatchCreate.
func (c *userServiceClient) BatchCreate(ctx context.Context, req *connect_go.Request[entpb.BatchCreateUsersRequest]) (*connect_go.Response[entpb.BatchCreateUsersResponse], error) {
	return c.batchCreate.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the entpb.UserService service.
type UserServiceHandler interface {
	Create(context.Context, *connect_go.Request[entpb.CreateUserRequest]) (*connect_go.Response[entpb.User], error)
	Get(context.Context, *connect_go.Request[entpb.GetUserRequest]) (*connect_go.Response[entpb.User], error)
	Update(context.Context, *connect_go.Request[entpb.UpdateUserRequest]) (*connect_go.Response[entpb.User], error)
	Delete(context.Context, *connect_go.Request[entpb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[entpb.ListUserRequest]) (*connect_go.Response[entpb.ListUserResponse], error)
	BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreateUsersRequest]) (*connect_go.Response[entpb.BatchCreateUsersResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/entpb.UserService/Create", connect_go.NewUnaryHandler(
		"/entpb.UserService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/entpb.UserService/Get", connect_go.NewUnaryHandler(
		"/entpb.UserService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/entpb.UserService/Update", connect_go.NewUnaryHandler(
		"/entpb.UserService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/entpb.UserService/Delete", connect_go.NewUnaryHandler(
		"/entpb.UserService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/entpb.UserService/List", connect_go.NewUnaryHandler(
		"/entpb.UserService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/entpb.UserService/BatchCreate", connect_go.NewUnaryHandler(
		"/entpb.UserService/BatchCreate",
		svc.BatchCreate,
		opts...,
	))
	return "/entpb.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Create(context.Context, *connect_go.Request[entpb.CreateUserRequest]) (*connect_go.Response[entpb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.Create is not implemented"))
}

func (UnimplementedUserServiceHandler) Get(context.Context, *connect_go.Request[entpb.GetUserRequest]) (*connect_go.Response[entpb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.Get is not implemented"))
}

func (UnimplementedUserServiceHandler) Update(context.Context, *connect_go.Request[entpb.UpdateUserRequest]) (*connect_go.Response[entpb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.Update is not implemented"))
}

func (UnimplementedUserServiceHandler) Delete(context.Context, *connect_go.Request[entpb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.Delete is not implemented"))
}

func (UnimplementedUserServiceHandler) List(context.Context, *connect_go.Request[entpb.ListUserRequest]) (*connect_go.Response[entpb.ListUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.List is not implemented"))
}

func (UnimplementedUserServiceHandler) BatchCreate(context.Context, *connect_go.Request[entpb.BatchCreateUsersRequest]) (*connect_go.Response[entpb.BatchCreateUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("entpb.UserService.BatchCreate is not implemented"))
}
